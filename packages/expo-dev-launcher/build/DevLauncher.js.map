{"version":3,"file":"DevLauncher.js","sourceRoot":"","sources":["../src/DevLauncher.ts"],"names":[],"mappings":"AAKA,IAAI,yBAAyB,GAAG,KAAK,CAAC;AAEtC,SAAS,+BAA+B,CAAC,KAAY;IACnD,KAAK,CAAC,OAAO,IAAI;;;;8EAI2D,CAAC;AAC/E,CAAC;AAED,SAAS,cAAc,CAAC,KAAwB;IAC9C,IAAI,MAAM,IAAI,KAAK,EAAE;QACnB,qCAAqC;QACrC,QAAQ,KAAK,CAAC,IAAI,EAAE;YAClB,KAAK,iBAAiB,CAAC,CAAC;gBACtB,+BAA+B,CAAC,KAAK,CAAC,CAAC;gBACvC,MAAM;aACP;SACF;KACF;SAAM,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,8BAA8B,CAAC,EAAE;QACjE,+BAA+B,CAAC,KAAK,CAAC,CAAC;KACxC;AACH,CAAC;AAED,SAAS,YAAY,CAAC,EAAE,EAAE,KAAK,EAAE,OAAO;IACtC,IAAI,KAAK,YAAY,KAAK,EAAE;QAC1B,cAAc,CAAC,KAAK,CAAC,CAAC;KACvB;IAED,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AACrB,CAAC;AAED,MAAM,UAAU,qBAAqB;IACnC,IAAI,yBAAyB,EAAE;QAC7B,OAAO;KACR;IACD,yBAAyB,GAAG,IAAI,CAAC;IAEjC,MAAM,aAAa,GAAG,UAAU,CAAC,gBAAgB,EAAE,CAAC;IACpD,UAAU,CAAC,gBAAgB,CAAC,UAAS,GAAG,IAAI;QAC1C,YAAY,CAAC,aAAa,EAAE,GAAG,IAAI,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { ErrorUtils } from 'react-native';\n\n// Similar interface to the one used in expo modules.\ntype CodeError = Error & { code?: string };\n\nlet errorHandlerWasRegistered = false;\n\nfunction customizeModuleIsMissingMessage(error: Error) {\n  error.message += `\n      \n  Possible solutions:\n  - Make sure that you're using the newest version of your native shell app.\n  - Make sure that you're not trying to load the old version of your js code.`;\n}\n\nfunction customizeError(error: Error | CodeError) {\n  if ('code' in error) {\n    // It's a CodeError from expo modules\n    switch (error.code) {\n      case 'ERR_UNAVAILABLE': {\n        customizeModuleIsMissingMessage(error);\n        break;\n      }\n    }\n  } else if (error.message.includes('Native module cannot be null')) {\n    customizeModuleIsMissingMessage(error);\n  }\n}\n\nfunction errorHandler(fn, error, isFatal) {\n  if (error instanceof Error) {\n    customizeError(error);\n  }\n\n  fn(error, isFatal);\n}\n\nexport function registerErrorHandlers() {\n  if (errorHandlerWasRegistered) {\n    return;\n  }\n  errorHandlerWasRegistered = true;\n\n  const globalHandler = ErrorUtils.getGlobalHandler();\n  ErrorUtils.setGlobalHandler(function(...args) {\n    errorHandler(globalHandler, ...args);\n  });\n}\n"]}